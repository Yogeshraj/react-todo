{"version":3,"sources":["components/Tasklist/Tasklist.module.css","components/Todoinput/Todo.module.css","components/Todoinput/Todo.jsx","components/Tasklist/Tasklist.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Todo","handleChange","useState","inputVal","setinputVal","className","styles","todocontainer","onSubmit","e","preventDefault","trim","type","inputbox","placeholder","value","onChange","target","Tasklist","data","taskData","settaskData","isInitialMount","useRef","useEffect","current","newTasks","completed","taskbox","map","task","i","style","textDecoration","tasks","key","Checkbox","event","updateTask","checked","checkChange","name","color","delete","onClick","splice","deleteTask","App","state","setState","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gFACAA,EAAOC,QAAU,CAAC,QAAU,0BAA0B,MAAQ,wBAAwB,OAAS,2B,mBCA/FD,EAAOC,QAAU,CAAC,cAAgB,4BAA4B,SAAW,yB,kOCoB1DC,EAjBF,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAAmB,EACCC,mBAAS,IADV,mBACxBC,EADwB,KACdC,EADc,KAQ/B,OACI,yBAAKC,UAAWC,IAAOC,eACnB,0BAAMC,SAPK,SAACC,GACpBA,EAAEC,iBACFT,EAAaE,EAASQ,QACtBP,EAAY,MAKA,2BAAOQ,KAAK,OAAOP,UAAWC,IAAOO,SAAUC,YAAY,iBAAiBC,MAAOZ,EAAUa,SAAU,SAACP,GAAD,OAAML,EAAYK,EAAEQ,OAAOF,a,iDC2CnIG,MApDf,YAA0B,IAAPC,EAAM,EAANA,KAAM,EACUjB,mBAAS,IADnB,mBACdkB,EADc,KACJC,EADI,KAEfC,EAAiBC,kBAAO,GAgC9B,OA9BAC,qBAAU,WACN,GAAIF,EAAeG,QACfH,EAAeG,SAAU,MACtB,CACH,IAAMC,EAAQ,sBAAON,GAAP,CAAgB,CAAED,KAAKA,EAAMQ,WAAW,KACtDN,EAAYK,MAGjB,CAACP,IAuBJ,yBAAKd,UAAWC,IAAOsB,SAClBR,EAASS,KAAI,SAACC,EAAMC,GAAP,OACV,yBAAKC,MAAO,CAACC,eAAiBH,EAAKH,UAAY,eAAiB,IAAMtB,UAAWC,IAAO4B,MAAOC,IAAKJ,GAChG,8BAAM,kBAACK,EAAA,EAAD,CAAUrB,MAAK,iBAAYgB,GAAKf,SAAU,SAACqB,GAAD,OAZxC,SAACN,EAAGM,GACpB,IAAMC,EAAU,YAAOlB,GACvBkB,EAAWP,GAAGJ,UAAYU,EAAMpB,OAAOsB,QACvClB,EAAYiB,GASqDE,CAAYT,EAAGM,IAAQI,KAAI,iBAAYV,GAAKW,MAAM,aAC1GZ,EAAKX,KACLW,EAAKH,UAAY,0BAAMtB,UAAWC,IAAOqC,OAAQC,QAAS,kBApBpD,SAACb,GAChB,IAAMO,EAAU,YAAOlB,GACvBkB,EAAWO,OAAOd,EAAG,GACrBV,EAAYiB,GAiB6DQ,CAAWf,KAAI,kBAAC,IAAD,OAAwB,SCPzGgB,E,4MArBbC,MAAM,CACJ7B,KAAK,I,EAGPlB,aAAe,SAACkB,GACd,EAAK8B,SAAS,CAAC9B,KAAKA,K,uDAIb,IACAA,EAAQ+B,KAAKF,MAAb7B,KACP,OACE,yBAAKd,UAAU,gBACf,yCACA,kBAAC,EAAD,CAAMJ,aAAciD,KAAKjD,eACzB,kBAAC,EAAD,CAAUkB,KAAMA,S,GAjBJgC,IAAMC,WCJJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6b4516b1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskbox\":\"Tasklist_taskbox__F-fO4\",\"tasks\":\"Tasklist_tasks__1FQuz\",\"delete\":\"Tasklist_delete__3vnhp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todocontainer\":\"Todo_todocontainer__2qk0d\",\"inputbox\":\"Todo_inputbox__uMsO3\"};","import React, {useState} from 'react';\r\nimport styles from './Todo.module.css';\r\n\r\n\r\nconst Todo = ({ handleChange  }) =>{\r\n    const [inputVal, setinputVal] = useState([]);\r\n    \r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    handleChange(inputVal.trim());\r\n    setinputVal('');\r\n  }\r\n    return(\r\n        <div className={styles.todocontainer}>\r\n            <form onSubmit={handleSubmit}>\r\n                <input type=\"text\" className={styles.inputbox} placeholder=\"Enter the task\" value={inputVal} onChange={(e)=> setinputVal(e.target.value) } />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todo;","import React, {useState, useEffect, useRef} from 'react';\r\nimport styles from './Tasklist.module.css';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\n\r\nfunction Tasklist({data}){\r\n    const [taskData, settaskData] =useState([]);\r\n    const isInitialMount = useRef(true);\r\n\r\n    useEffect(()=>{\r\n        if (isInitialMount.current) {\r\n            isInitialMount.current = false;\r\n        } else {\r\n            const newTasks = [...taskData,{ data:data, completed: false }];\r\n            settaskData(newTasks);\r\n            // console.log(isInitialMount.current);\r\n        }\r\n    }, [data]);\r\n\r\n    const Loader = () =>{\r\n        return (\r\n            <p>Please enter the task!</p>\r\n        )\r\n    }\r\n\r\n    const deleteTask = (i) =>{\r\n        const updateTask = [...taskData];\r\n        updateTask.splice(i, 1);\r\n        settaskData(updateTask);\r\n    }\r\n\r\n    const checkChange = (i, event) =>{\r\n        const updateTask = [...taskData];\r\n        updateTask[i].completed = event.target.checked;\r\n        settaskData(updateTask);\r\n    }\r\n\r\n\r\n\r\n    return(\r\n    <div className={styles.taskbox}>\r\n        {taskData.map((task, i) => (\r\n            <div style={{textDecoration : task.completed ? \"line-through\" : '' }} className={styles.tasks} key={i}>\r\n                <span><Checkbox value={`checked${i}`} onChange={(event)=>checkChange(i, event)} name={`checked${i}`} color=\"primary\"/></span> \r\n                {task.data}\r\n                {task.completed ? <span className={styles.delete} onClick={() => deleteTask(i)}><DeleteIcon /></span> : ''}\r\n            </div>\r\n        ))}\r\n    </div>\r\n    // <div className={styles.taskbox}>\r\n    //     {data.length > 0 ? taskData.map((task, i) => (\r\n    //                 <div className={styles.tasks} key={i}>{task.data}</div>\r\n    //             )) : <Loader />}\r\n    // </div>\r\n    )\r\n}\r\n\r\nexport default Tasklist;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Todo from './components/Todoinput/Todo';\nimport Tasklist from './components/Tasklist/Tasklist';\n\n\n// function App() {\n//   return (\n    // <div className='main-content'>\n    //   <h1>Todo list</h1>\n    //   <Todo />\n    //   <Tasklist />\n    // </div>\n//   );\n// }\nclass App extends React.Component{\n\n  state={\n    data:'',\n  }\n\n  handleChange = (data) => {\n    this.setState({data:data});\n  }\n\n\n  render(){\n    const {data} = this.state;\n    return(\n      <div className='main-content'>\n      <h1>Todo list</h1>\n      <Todo handleChange={this.handleChange} />\n      <Tasklist data={data} />\n    </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}